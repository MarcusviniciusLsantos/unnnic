name: Build unnnic (Push Tag)

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:

      - name: Set variables
        run: |
          TAG=$(echo $GITHUB_REF | cut -d"/" -f3)
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "TAG=${TAG}"
          VERSION=${TAG#v}
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
          echo "VERSION=${VERSION}"
          echo "COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
          echo "COMMIT_SHA=${GITHUB_SHA}"
          echo "REGISTRY_URL=869898323958.dkr.ecr.us-east-1.amazonaws.com" >> ${GITHUB_ENV}
          echo "REGISTRY_URL=869898323958.dkr.ecr.us-east-1.amazonaws.com"
          echo "IMAGE_TAG=unnnic:${TAG}" >> ${GITHUB_ENV}
          echo "IMAGE_TAG=unnnic:${TAG}"
          echo "IMAGE_REPOSITORY=Ilhasoft/unnnic" >> ${GITHUB_ENV}
          echo "IMAGE_REPOSITORY=Ilhasoft/unnnic"
          echo "MANIFESTS_REPOSITORY=Ilhasoft/kubernetes-manifests" >> ${GITHUB_ENV}
          echo "MANIFESTS_REPOSITORY=Ilhasoft/kubernetes-manifests"
          echo "PROJECT_DIR=unnnic" >> ${GITHUB_ENV}
          echo "PROJECT_DIR=unnnic"
          echo "PATCH_TARGET=deployment.json" >> ${GITHUB_ENV}
          echo "PATCH_TARGET=deployment.json"

      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{env.GITHUB_SHA}}
          repository: ${{env.IMAGE_REPOSITORY}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{env.REGISTRY_URL}}
          username: ${{secrets.AWS_ACCESS_KEY_ID_SHARED}}
          password: ${{secrets.AWS_SECRET_ACCESS_KEY_SHARED}}

      #- name: Login to DockerHub
      #  uses: docker/login-action@v1
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push - unnnic Image
        id: docker_build1
        uses: docker/build-push-action@v2
        with:
          context: .
          labels: branch=${{env.TAG}},commit=${{env.COMMIT_SHA}},repository=https://github.com/${{env.IMAGE_REPOSITORY}}
          file: Dockerfile
          push: true
          tags: ${{env.REGISTRY_URL}}/${{env.IMAGE_TAG}}
          no-cache: true

      - name: Check out Kubernetes Manifests
        uses: actions/checkout@master
        with:
          ref: main
          repository: ${{env.MANIFESTS_REPOSITORY}}
          token: ${{secrets.DEVOPS_GITHUB_PERMANENT_TOKEN}}
          path: ./kubernetes-manifests/

      - name: Update image on deployment
        env:
          PROJECT_DIR: ${{env.PROJECT_DIR}}
          PATCH_TARGET: ${{env.PATCH_TARGET}}
        run: |
            which jq > /dev/null 2>&1 || ( sudo apt update ; sudo apt install -y jq )

            # Dep: coreutils
            verlte(){
              [ "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
            }
            verlt(){
              [ "$1" = "$2" ] && return 1 || verlte $1 $2
            }

            ENV_DIR=$(
              find kubernetes-manifests/${PROJECT_DIR}/ -maxdepth 1 -mindepth 1 -type d \
                | egrep -v -e '.git' -e '/base$' \
                | while read dirname ; do
                    test -r "${dirname}/kustomization.yaml" && echo "${dirname}"
                done
            )
            for e in ${ENV_DIR}; do
              echo "Update ${e}:"
              if [ ! -d "${e}" ] ; then
                echo "${e}: Does not exist, skipping"
              elif [ ! -r "${e}/kustomization.yaml" ] ; then
                echo "${e}/kustomization.yaml: Does not readable, skipping"
              elif [ ! -r "${e}/${PATCH_TARGET}" ] ; then
                echo "${e}/${PATCH_TARGET}: Does not readable, skipping"
              else
                OLD_IMAGE=$(
                  cat "${e}/${PATCH_TARGET}" \
                    | jq '.[] | select(.path == "/spec/template/spec/containers/0/image") | .value'
                )
                echo "Old image to replace: ${OLD_IMAGE}"
                OLD_VERSION=$(
                  echo "${OLD_IMAGE}" \
                    | sed s'/^.*[v:-]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/'g \
                    | head -n1
                )
                echo "Old image version to compare: ${OLD_VERSION}<=${{env.VERSION}}"
                if verlte "${OLD_VERSION}" "${{env.VERSION}}" ; then
                  echo 'New configurations:'
                  new_configuration=$(
                    cat "${e}/${PATCH_TARGET}" \
                      | jq '(..|select(.path == "/spec/template/spec/containers/0/image")?) += {value: "'"${{env.REGISTRY_URL}}/${{env.IMAGE_TAG}}"'"}'
                  )
                  echo "${new_configuration}"
                  echo "${new_configuration}" > "${e}/${PATCH_TARGET}"
                else
                  echo "Version in file is greater than build, skiping update yaml"
                fi
              fi
            done

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.DEVOPS_GITHUB_PERMANENT_TOKEN }}
          repository: ${{ env.MANIFESTS_REPOSITORY }}
          directory: ./kubernetes-manifests/
          branch: main
          message: "From unnnic Build (Push-Tag)"

      - name: Generated Image
        run: |
          echo "IMAGE:      " ${{env.REGISTRY_URL}}/${{env.IMAGE_TAG}}

